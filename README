Quick Usage:
------------
make && python create_data.py && python timing_test.py


Usage:
------
(tested with Python 2.6, Cython 0.12.1, gcc 4.4.3, on a Linux x86_64)

Use the included Makefile (edit to adjust paths and stuff, to suite your
platform) to create a shared object from the C and Cython Code.

$ make all

Take a look at and run basic_test.py. It demonstrates the basic usage of the C
extension from within Python.

$ python basic_test.py

If everything runs fine, create a big XML file, which will yield the speed
comparison data for the following step. Use the supplied create_data.py. A file
called 'vectors.xml' will be created. You can also tweak its properties (number
of vectors, size of vectors, ...) beforehand in create_data.py.

$ python create_data.py

For the speed comparison use the timing_test.py script, which implements a
pure Python version of the C/Cython alternative.

$ python timing_test.py

The resulting output could look something like this:

> 5000 vectors read
> 
> Timing C extension:
> 0.0113111 seconds for normalization of vectorspace
> 56.9309 seconds for n x n matrix using C extension
> 
> Timing pure Python Vector class:
> 0.11858 seconds for normalization of vectorspace
> 262.186 seconds for n x n matrix using pure Python class


More information:
-----------------
This folder holds code for a relatively simple example on how to use Cython to
create C extension modules to speed up Python code.

Files whash.c and whash.h contain a simple C implementation of a HashMap like
data structure for storing integer/float pairs. A practical use for such a
mapping would be for example when dealing with "vectors" in information
retrieval. Here termID -> weight mappings are pretty common.

The file vector.pyx is the Cython implementation of a Vector object that after
compilation will be accessible from within Python. It itself makes direct use
of the C hash structure implementation. Calling `cython vector.pyx` will create
a vector.c file that can be compiled as a shared object (vector.so) with a
standard C compiler. The supplied Makefile gives an example on how to do just
that, but it is probably far from perfect -- adjust it to suite your needs.

Note that the speed gains in this example (4x - 10x) are far from what you
could actually achieve in real life (1000x). This example is basically just a
reimplementation of the Python dict, which is generally pretty fast. Of course
it is too generic to exactly suite a special purpose need. The main speed gains
in this example come from the numerical calculations done in the cosine_sim()
and normalize() methods.

Of course the code is only intended to give a quick overview of the topic. It
is neither perfect nor extremely clever. I'm pretty sure several improvements
for both the Python version and the Cython version of the Vector class could be
made, but you should get the idea.


Links:
------
http://python.org
http://cython.org
